import random

from typing import List
from game_options import Options
from game_process import GameProcess
from bot import MasterBot
from player import Player



class Game() :
    """
    Class that represents the game and contains all game logic
    """
    def __init__(self , options: Options) -> None:
        """
        Constucts a game. Requires a game name, pass code, maximum number of turns, localization, number of texts generated by text generator, and generators of text themselves
        """
        self.options = options
        self.players = []
        self.is_game_started = False

    def add_player(self, player : Player) -> None :
        """
        Adds player to a game
        """
        if self.is_game_started :
            return

        if self.options.max_players > len(self.players) :
            player.is_playing = True
            self.players.append(player)
            if self.options.max_players == len(self.players) :
                self.options.game_mode.start_game(GameProcess(self.players, self.options), self.options)
                self.is_game_started = True

class Lobby() :
    """
    Class that controlls the process of players joining the games.
    """

    def __init__(self, bot : MasterBot, games : List[Game]) -> None:
        """
        Initialize the instance of Lobby class.
        Requires a bot for communication with players and the list of available games.
        """
        self.bot = bot
        self.games = games

        self.users = []
        self.bot.add_listener(self._on_message)
 
    def _on_message(self, chat_id : int, content : str) -> None :
        """
        Bot calls this method when user send any message
        """
        user = self.find_user_by_chat_id(chat_id)
        
        if user and user.is_playing :
            user.provide_message(content)
            return

        if user :
            for game in self.games :
                if game.options.pass_code == content and not game.is_game_started :
                    game.add_player(user)
                    return
            if not user.is_playing :
                self._show_avaible_games(chat_id)
        else :
            new_user = Player(chat_id, self.bot)
            self.users.append(new_user)

            for game in self.games :
                if game.options.pass_code == content and not game.is_game_started :
                    game.add_player(new_user)
                    return
            self._show_avaible_games(chat_id)

    def find_user_by_chat_id(self, chat_id : int) -> Player :
        """
        Finds a user with specific chat_id, if there is any.
        If user was not found returns None
        """
        for user in self.users :
            if user.chat_id == chat_id :
                return user
        return None
    
    def _show_avaible_games(self, chat_id : int) -> None :
        """
        Shows the available games (in-game we call them servers) for user.
        """
        list_of_servers = "Available servers:\n"
        for i in range(len(self.games)) :
            if self.games[i].is_game_started :
                continue
            list_of_servers += str(i+1) + "." + self.games[i].options.game_name + ", code: " + self.games[i].options.pass_code + "\n"
        list_of_servers += "\nEnter server code to connect"
        self.bot.send_message(list_of_servers, chat_id)

